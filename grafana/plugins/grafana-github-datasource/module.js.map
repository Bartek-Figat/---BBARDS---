{"version":3,"file":"module.js","mappings":"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","sources":["webpack:///external amd \"@emotion/css\"","webpack:///external amd \"@grafana/data\"","webpack:///external amd \"@grafana/runtime\"","webpack:///external amd \"@grafana/ui\"","webpack:///external amd \"lodash\"","webpack:///external amd \"react\"","webpack:///webpack/bootstrap","webpack:///webpack/runtime/compat get default export","webpack:///webpack/runtime/define property getters","webpack:///webpack/runtime/hasOwnProperty shorthand","webpack:///webpack/runtime/make namespace object","webpack:///./variables.ts","webpack:///./types.ts","webpack:///./validation.ts","webpack:///./common/annotationsFromDataFrame.ts","webpack:///./migrations.ts","webpack:///./DataSource.ts","webpack:///./tracking.ts","webpack:///../node_modules/@grafana/experimental/dist/esm/ConfigEditor/DataSourceDescription.js","webpack:///../node_modules/@grafana/experimental/dist/esm/ConfigEditor/ConfigSection/GenericConfigSection.js","webpack:///../node_modules/@grafana/experimental/dist/esm/ConfigEditor/ConfigSection/ConfigSection.js","webpack:///./components/selectors.ts","webpack:///./views/ConfigEditor.tsx","webpack:///./components/Forms.tsx","webpack:///./views/QueryEditorRepository.tsx","webpack:///./views/QueryEditorReleases.tsx","webpack:///./views/QueryEditorCommits.tsx","webpack:///./views/QueryEditorIssues.tsx","webpack:///./views/QueryEditorMilestones.tsx","webpack:///./views/QueryEditorPullRequests.tsx","webpack:///./views/QueryEditorTags.tsx","webpack:///./views/QueryEditorContributors.tsx","webpack:///./views/QueryEditorLabels.tsx","webpack:///./views/QueryEditorPackages.tsx","webpack:///./views/QueryEditorVulnerabilities.tsx","webpack:///./components/Filters.tsx","webpack:///./views/QueryEditorProjects.tsx","webpack:///./views/QueryEditorWorkflows.tsx","webpack:///./views/QueryEditorWorkflowUsage.tsx","webpack:///./views/QueryEditor.tsx","webpack:///./components/FieldSelect.tsx","webpack:///./views/VariableQueryEditor.tsx","webpack:///./module.ts"],"sourcesContent":["module.exports = __WEBPACK_EXTERNAL_MODULE__644__;","module.exports = __WEBPACK_EXTERNAL_MODULE__305__;","module.exports = __WEBPACK_EXTERNAL_MODULE__545__;","module.exports = __WEBPACK_EXTERNAL_MODULE__388__;","module.exports = __WEBPACK_EXTERNAL_MODULE__980__;","module.exports = __WEBPACK_EXTERNAL_MODULE__650__;","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = (module) => {\n\tvar getter = module && module.__esModule ?\n\t\t() => (module['default']) :\n\t\t() => (module);\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","import { GitHubQuery } from './types';\nimport { TemplateSrv } from '@grafana/runtime';\nimport { ScopedVars } from '@grafana/data';\n\nexport const replaceVariable = (\n  t: TemplateSrv,\n  value?: string,\n  scoped?: ScopedVars,\n  format?: string\n): string | undefined => {\n  return !!value ? t.replace(value, scoped, format) : value;\n};\n\nexport const replaceVariables = (t: TemplateSrv, query: GitHubQuery, scoped: ScopedVars): GitHubQuery => {\n  let updatedQuery = { ...query };\n  updatedQuery = interpolateObject(updatedQuery, t, scoped);\n  if (query.options) {\n    updatedQuery = { ...updatedQuery, options: interpolateObject(query.options, t, scoped) };\n  }\n  return updatedQuery;\n};\n\nconst interpolateObject = (input: any, t: TemplateSrv, scoped: ScopedVars = {}) => {\n  let newOptions = { ...input };\n  Object.keys(newOptions).forEach((key) => {\n    if (key !== 'refId') {\n      const option = newOptions[key];\n      if (typeof option === 'string') {\n        if (key === 'query') {\n          newOptions = { ...newOptions, [key]: replaceVariable(t, option, scoped, 'csv') };\n        } else {\n          newOptions = { ...newOptions, [key]: replaceVariable(t, option, scoped) };\n        }\n      } else if (Array.isArray(option)) {\n        const replaced = option.map((opt) => interpolateObject(opt, t, scoped));\n        newOptions = { ...newOptions, [key]: replaced };\n      }\n    }\n  });\n  return newOptions;\n};\n","import { DataQuery, DataSourceJsonData } from '@grafana/data';\nimport { Filter } from 'components/Filters';\n\nexport interface Label {\n  color: string;\n  description: string;\n  name: string;\n}\n\nexport interface RepositoryOptions {\n  repository?: string;\n  owner?: string;\n}\n\nexport interface GithubEnterpriseOptions {\n  githubUrl?: string;\n}\n\nexport interface GithubDataSourceOptions extends DataSourceJsonData, RepositoryOptions, GithubEnterpriseOptions {\n  // Any global settings\n}\n\nexport interface GithubSecureJsonData {\n  // accessToken is set if the user is using a Personal Access Token to connect to GitHub\n  accessToken?: string;\n}\n\nexport enum QueryType {\n  Commits = 'Commits',\n  Issues = 'Issues',\n  Contributors = 'Contributors',\n  Tags = 'Tags',\n  Releases = 'Releases',\n  Pull_Requests = 'Pull_Requests',\n  Labels = 'Labels',\n  Repositories = 'Repositories',\n  Organizations = 'Organizations',\n  GraphQL = 'GraphQL',\n  Milestones = 'Milestones',\n  Packages = 'Packages',\n  Vulnerabilities = 'Vulnerabilities',\n  Projects = 'Projects',\n  ProjectItems = 'ProjectItems',\n  Stargazers = 'Stargazers',\n  Workflows = 'Workflows',\n  Workflow_Usage = 'Workflow_Usage',\n}\n\nexport enum PackageType {\n  NPM = 'NPM',\n  RUBYGEMS = 'RUBYGEMS',\n  MAVEN = 'MAVEN',\n  DOCKER = 'DOCKER',\n  DEBIAN = 'DEBIAN',\n  NUGET = 'NUGET',\n  PYPI = 'PYPI',\n}\n\nexport enum PullRequestTimeField {\n  ClosedAt,\n  CreatedAt,\n  MergedAt,\n  None,\n}\n\nexport enum IssueTimeField {\n  CreatedAt,\n  ClosedAt,\n}\n\nexport enum WorkflowsTimeField {\n  CreatedAt,\n  UpdatedAt,\n}\n\nexport interface Indexable {\n  [index: string]: any;\n}\n\nexport interface ReleasesOptions extends Indexable {}\nexport interface TagsOptions extends Indexable {}\nexport interface PullRequestsOptions extends Indexable {\n  timeField?: PullRequestTimeField;\n  query?: string;\n}\n\nexport interface CommitsOptions extends Indexable {\n  gitRef?: string;\n}\n\nexport interface ContributorsOptions extends Indexable {\n  query?: string;\n}\n\nexport interface LabelsOptions extends Indexable {\n  query?: string;\n}\n\nexport interface IssuesOptions extends Indexable {\n  timeField?: IssueTimeField;\n  query?: string;\n}\n\nexport interface WorkflowsOptions extends Indexable {\n  timeField?: WorkflowsTimeField;\n  query?: string;\n}\n\nexport interface WorkflowUsageOptions extends Indexable {\n  workflowID?: number;\n}\n\nexport interface PackagesOptions extends Indexable {\n  names?: string;\n  packageType?: PackageType;\n}\n\nexport interface MilestonesOptions extends Indexable {\n  query?: string;\n}\n\nexport interface ProjectsOptions extends Indexable {\n  organization?: string;\n  number?: number | string;\n  user?: string;\n  kind?: ProjectQueryType;\n  filters?: Filter[];\n}\n\nexport enum ProjectQueryType {\n  ORG = 0,\n  USER = 1,\n}\n\nexport interface GitHubQuery extends Indexable, DataQuery, RepositoryOptions {\n  options?:\n    | PullRequestsOptions\n    | ReleasesOptions\n    | LabelsOptions\n    | TagsOptions\n    | CommitsOptions\n    | IssuesOptions\n    | ContributorsOptions\n    | ProjectsOptions\n    | WorkflowsOptions\n    | WorkflowUsageOptions;\n}\n\nexport interface GitHubVariableQuery extends GitHubQuery {\n  key?: string;\n  field?: string;\n}\n\nexport interface GitHubAnnotationQuery extends GitHubVariableQuery {\n  timeField?: string;\n}\n\nexport const DefaultQueryType = QueryType.Issues;\n","import { isEmpty } from 'lodash';\nimport { GitHubQuery, ProjectQueryType, QueryType } from './types';\n\nexport const isValid = (query: GitHubQuery): boolean => {\n  // The current requirement is that the query has a querytype\n  // TODO: have each option implement a validation function\n  if (query.queryType === QueryType.Projects) {\n    if (isEmpty(query.options?.organization) && query.options?.kind === ProjectQueryType.ORG) {\n      return false;\n    }\n    if (isEmpty(query.options?.user) && query.options?.kind === ProjectQueryType.USER) {\n      return false;\n    }\n  }\n  return !!query.queryType;\n};\n","import { AnnotationEvent, DataFrame, FieldType, Field, KeyValue } from '@grafana/data';\n\ninterface AnnotationEventNames {\n  userId?: string;\n  login?: string;\n  email?: string;\n  avatarUrl?: string;\n  time?: string; // or first time\n  timeEnd?: string;\n  title?: string;\n  text?: string; // or first string\n  tags?: string; // Split on ','\n}\n\nconst defaultAnnotationEventFinder: AnnotationEventNames = {\n  userId: 'userId',\n  login: 'login',\n  email: 'email',\n  avatarUrl: 'avatarUrl',\n  time: 'time',\n  timeEnd: 'timeEnd',\n  title: 'title',\n  text: 'text',\n  tags: 'tags',\n};\n\ninterface AnnotationEventFieldSetter {\n  key: keyof AnnotationEventNames;\n  field: Field;\n\n  regex?: RegExp; // for text\n  split?: string; // for tags\n}\n\nexport interface AnnotationsFromFrameOptions {\n  field?: AnnotationEventNames;\n  regex?: AnnotationEventNames;\n}\n\nexport function getAnnotationsFromFrame(frame: DataFrame, options?: AnnotationsFromFrameOptions): AnnotationEvent[] {\n  const events: AnnotationEvent[] = [];\n  if (!frame || !frame.length) {\n    return events;\n  }\n\n  let hasTime = false;\n  let hasText = false;\n  const byName: KeyValue<Field> = {};\n  for (const f of frame.fields) {\n    byName[f.name.toLowerCase()] = f;\n  }\n\n  options = {\n    field: {},\n    regex: {},\n    ...options,\n  };\n\n  const fields: AnnotationEventFieldSetter[] = [];\n  const finder: AnnotationEventNames = {\n    ...defaultAnnotationEventFinder,\n    ...options?.field,\n  };\n  for (const [key, value] of Object.entries(finder)) {\n    const lower = value ? value.toLowerCase() : '';\n    if (lower && byName[lower]) {\n      const v: AnnotationEventFieldSetter = {\n        key: key as keyof AnnotationEventNames,\n        field: byName[lower],\n      };\n      switch (v.key) {\n        case 'time':\n          hasTime = true;\n          break;\n        case 'text':\n          hasText = true;\n          break;\n        case 'tags':\n          v.split = ',';\n          break;\n      }\n      const regex = options.regex![v.key];\n      if (regex) {\n        v.regex = new RegExp(regex);\n      }\n      fields.push(v);\n    }\n  }\n  if (!hasTime) {\n    const field = frame.fields.find((f) => f.type === FieldType.time);\n    if (!field) {\n      return []; // no time fields exist\n    }\n    fields.push({\n      key: 'time',\n      field,\n    });\n  }\n\n  if (!hasText) {\n    const field = frame.fields.find((f) => f.type === FieldType.string);\n    if (!field) {\n      return []; // no text fields exist\n    }\n    const setter: AnnotationEventFieldSetter = {\n      key: 'text',\n      field,\n    };\n\n    if (options?.regex?.text) {\n      setter.regex = new RegExp(options.regex.text);\n    }\n    fields.push(setter);\n  }\n\n  // Add each value to the string\n  for (let i = 0; i < frame.length; i++) {\n    const anno: AnnotationEvent = {};\n    for (const f of fields) {\n      let v = f.field.values.get(i);\n      if (f.regex) {\n        const match = f.regex.exec(v);\n        if (match) {\n          v = match[1] ? match[1] : match[0];\n        }\n      }\n      if (f.split) {\n        v = (v as string).split(',');\n      }\n      (anno as any)[f.key] = v;\n    }\n    events.push(anno);\n  }\n\n  return events;\n}\n","import { AnnotationEventFieldSource } from '@grafana/data';\n\nconst isNewAnnotation = (json: any) => {\n  return !('annotation' in json);\n};\n\nexport const prepareAnnotation = (json: any) => {\n  if (isNewAnnotation(json)) {\n    return json;\n  }\n\n  const { annotation, ...annotationRest } = json;\n  const { field, timeField, ...targetRest } = annotation;\n\n  const migratedAnnotation = {\n    ...annotationRest,\n    target: targetRest,\n    mappings: {\n      text: field\n        ? {\n            source: AnnotationEventFieldSource.Field,\n            value: field,\n          }\n        : undefined,\n      time: timeField\n        ? {\n            source: AnnotationEventFieldSource.Field,\n            value: timeField,\n          }\n        : undefined,\n      ...annotationRest.mappings,\n    },\n  };\n\n  return migratedAnnotation;\n};\n","import {\n  AnnotationEvent,\n  DataFrame,\n  DataFrameView,\n  DataQueryRequest,\n  DataQueryResponse,\n  DataSourceInstanceSettings,\n  MetricFindValue,\n  ScopedVars,\n} from '@grafana/data';\nimport { DataSourceWithBackend, getTemplateSrv } from '@grafana/runtime';\nimport { GithubDataSourceOptions, GitHubQuery, GitHubVariableQuery, Label } from './types';\nimport { replaceVariables } from './variables';\nimport { isValid } from './validation';\nimport { getAnnotationsFromFrame } from 'common/annotationsFromDataFrame';\nimport { prepareAnnotation } from 'migrations';\nimport { Observable } from 'rxjs';\nimport { trackRequest } from 'tracking';\n\nexport class GithubDataSource extends DataSourceWithBackend<GitHubQuery, GithubDataSourceOptions> {\n  templateSrv = getTemplateSrv();\n\n  constructor(instanceSettings: DataSourceInstanceSettings<GithubDataSourceOptions>) {\n    super(instanceSettings);\n    this.annotations = {\n      prepareAnnotation,\n    };\n  }\n\n  query(request: DataQueryRequest<GitHubQuery>): Observable<DataQueryResponse> {\n    trackRequest(request);\n    return super.query(request);\n  }\n\n  // Only execute queries that have a query type\n  filterQuery = (query: GitHubQuery) => {\n    return isValid(query) && !query.hide;\n  };\n\n  applyTemplateVariables(query: GitHubQuery, scoped: ScopedVars): Record<string, any> {\n    return replaceVariables(this.templateSrv, query, scoped);\n  }\n\n  async getLabels(repository: string, owner: string, query?: string): Promise<Label[]> {\n    return this.getResource('labels', {\n      repository,\n      owner,\n      query,\n    });\n  }\n\n  async annotationQuery(request: any): Promise<AnnotationEvent[]> {\n    const { annotation } = request.annotation;\n\n    const query = {\n      targets: [\n        {\n          ...annotation,\n          datasourceId: this.id,\n          refId: this.name,\n        },\n      ],\n      range: request.range,\n      interval: request.interval,\n    } as DataQueryRequest<GitHubQuery>;\n\n    const res = await this.query(query).toPromise();\n\n    if (!res?.data?.length) {\n      return [];\n    }\n    return getAnnotationsFromFrame(res.data[0], {\n      field: {\n        // title: `${request.annotation.name} - ${annotation.queryType}`,\n        time: annotation.timeField, // or first time field\n        text: annotation.field || 'name',\n      },\n    });\n  }\n\n  async getChoices(query: GitHubQuery): Promise<string[]> {\n    const request = {\n      targets: [\n        {\n          ...query,\n          refId: 'metricFindQuery',\n        },\n      ],\n      range: {\n        to: {},\n        from: {},\n      },\n    } as DataQueryRequest;\n\n    try {\n      const res = await this.query(request).toPromise();\n      const columns = (res?.data[0]?.fields || []).map((f: any) => f.name) || [];\n      return columns;\n    } catch (err) {\n      return Promise.reject(err);\n    }\n  }\n\n  async metricFindQuery(query: GitHubVariableQuery, options: any): Promise<MetricFindValue[]> {\n    const request = {\n      targets: [\n        {\n          ...query,\n          refId: 'metricFindQuery',\n        },\n      ],\n      range: options.range,\n      rangeRaw: options.rangeRaw,\n    } as DataQueryRequest;\n    try {\n      let res = await this.query(request).toPromise();\n      if (!res || !res.data || res.data.length < 0) {\n        return [];\n      }\n      const view = new DataFrameView(res.data[0] as DataFrame);\n      return view.map((item) => {\n        const value = item[query.key || ''] || item[query.field || 'name'];\n        return {\n          value,\n          text: item[query.field || 'name'],\n        };\n      });\n    } catch (ex) {\n      return Promise.reject(ex);\n    }\n  }\n}\n","import { CoreApp, DataQueryRequest } from '@grafana/data';\nimport { reportInteraction } from '@grafana/runtime';\nimport { GitHubQuery, IssueTimeField, PullRequestTimeField, WorkflowsTimeField } from 'types';\n\nexport const trackRequest = (request: DataQueryRequest<GitHubQuery>) => {\n  if (request.app === CoreApp.Dashboard || request.app === CoreApp.PanelViewer) {\n    return;\n  }\n\n  request.targets.forEach((target) => {\n    let properties: Partial<GitHubQuery> = { app: request.app, queryType: target.queryType };\n\n    if (target.queryType === 'Issues') {\n      properties.timeField = IssueTimeField[target.options?.timeField ?? 0];\n    }\n\n    if (target.queryType === 'Pull_Requests') {\n      properties.timeField = PullRequestTimeField[target.options?.timeField ?? 0];\n    }\n\n    if (target.queryType === 'Workflows') {\n      properties.timeField = WorkflowsTimeField[target.options?.timeField ?? 0];\n    }\n\n    if (target.queryType === 'Packages') {\n      properties.timeField = target?.options?.packageType ?? 'NPM';\n    }\n\n    reportInteraction('grafana_github_query_executed', properties);\n  });\n};\n","import React__default from 'react';\nimport { css, cx } from '@emotion/css';\nimport { useTheme2 } from '@grafana/ui';\n\nvar __defProp = Object.defineProperty;\nvar __defProps = Object.defineProperties;\nvar __getOwnPropDescs = Object.getOwnPropertyDescriptors;\nvar __getOwnPropSymbols = Object.getOwnPropertySymbols;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __propIsEnum = Object.prototype.propertyIsEnumerable;\nvar __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;\nvar __spreadValues = (a, b) => {\n  for (var prop in b || (b = {}))\n    if (__hasOwnProp.call(b, prop))\n      __defNormalProp(a, prop, b[prop]);\n  if (__getOwnPropSymbols)\n    for (var prop of __getOwnPropSymbols(b)) {\n      if (__propIsEnum.call(b, prop))\n        __defNormalProp(a, prop, b[prop]);\n    }\n  return a;\n};\nvar __spreadProps = (a, b) => __defProps(a, __getOwnPropDescs(b));\nconst DataSourceDescription = ({ dataSourceName, docsLink, hasRequiredFields = true, className }) => {\n  const theme = useTheme2();\n  const styles = {\n    container: css({\n      p: {\n        margin: 0\n      },\n      \"p + p\": {\n        marginTop: theme.spacing(2)\n      }\n    }),\n    text: css(__spreadProps(__spreadValues({}, theme.typography.body), {\n      color: theme.colors.text.secondary,\n      a: css({\n        color: theme.colors.text.link,\n        textDecoration: \"underline\",\n        \"&:hover\": {\n          textDecoration: \"none\"\n        }\n      })\n    }))\n  };\n  return /* @__PURE__ */ React__default.createElement(\"div\", { className: cx(styles.container, className) }, /* @__PURE__ */ React__default.createElement(\"p\", { className: styles.text }, \"Before you can use the \", dataSourceName, \" data source, you must configure it below or in the config file. For detailed instructions,\", \" \", /* @__PURE__ */ React__default.createElement(\"a\", { href: docsLink, target: \"_blank\", rel: \"noreferrer\" }, \"view the documentation\"), \".\"), hasRequiredFields && /* @__PURE__ */ React__default.createElement(\"p\", { className: styles.text }, /* @__PURE__ */ React__default.createElement(\"i\", null, \"Fields marked with * are required\")));\n};\n\nexport { DataSourceDescription };\n//# sourceMappingURL=DataSourceDescription.js.map\n","import React__default, { useState } from 'react';\nimport { css } from '@emotion/css';\nimport { useTheme2, IconButton } from '@grafana/ui';\n\nvar __defProp = Object.defineProperty;\nvar __defProps = Object.defineProperties;\nvar __getOwnPropDescs = Object.getOwnPropertyDescriptors;\nvar __getOwnPropSymbols = Object.getOwnPropertySymbols;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __propIsEnum = Object.prototype.propertyIsEnumerable;\nvar __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;\nvar __spreadValues = (a, b) => {\n  for (var prop in b || (b = {}))\n    if (__hasOwnProp.call(b, prop))\n      __defNormalProp(a, prop, b[prop]);\n  if (__getOwnPropSymbols)\n    for (var prop of __getOwnPropSymbols(b)) {\n      if (__propIsEnum.call(b, prop))\n        __defNormalProp(a, prop, b[prop]);\n    }\n  return a;\n};\nvar __spreadProps = (a, b) => __defProps(a, __getOwnPropDescs(b));\nconst GenericConfigSection = ({\n  children,\n  title,\n  description,\n  isCollapsible = false,\n  isInitiallyOpen = true,\n  kind = \"section\",\n  className\n}) => {\n  const { colors, typography, spacing } = useTheme2();\n  const [isOpen, setIsOpen] = useState(isCollapsible ? isInitiallyOpen : true);\n  const iconName = isOpen ? \"angle-up\" : \"angle-down\";\n  const isSubSection = kind === \"sub-section\";\n  const collapsibleButtonAriaLabel = `${isOpen ? \"Collapse\" : \"Expand\"} section ${title}`;\n  const styles = {\n    header: css({\n      display: \"flex\",\n      justifyContent: \"space-between\",\n      alignItems: \"center\"\n    }),\n    title: css({\n      margin: 0\n    }),\n    subtitle: css({\n      margin: 0,\n      fontWeight: typography.fontWeightRegular\n    }),\n    descriptionText: css(__spreadProps(__spreadValues({\n      marginTop: spacing(isSubSection ? 0.25 : 0.5),\n      marginBottom: 0\n    }, typography.bodySmall), {\n      color: colors.text.secondary\n    })),\n    content: css({\n      marginTop: spacing(2)\n    })\n  };\n  return /* @__PURE__ */ React__default.createElement(\"div\", { className }, /* @__PURE__ */ React__default.createElement(\"div\", { className: styles.header }, kind === \"section\" ? /* @__PURE__ */ React__default.createElement(\"h3\", { className: styles.title }, title) : /* @__PURE__ */ React__default.createElement(\"h6\", { className: styles.subtitle }, title), isCollapsible && /* @__PURE__ */ React__default.createElement(\n    IconButton,\n    {\n      name: iconName,\n      onClick: () => setIsOpen(!isOpen),\n      type: \"button\",\n      size: \"xl\",\n      \"aria-label\": collapsibleButtonAriaLabel\n    }\n  )), description && /* @__PURE__ */ React__default.createElement(\"p\", { className: styles.descriptionText }, description), isOpen && /* @__PURE__ */ React__default.createElement(\"div\", { className: styles.content }, children));\n};\n\nexport { GenericConfigSection };\n//# sourceMappingURL=GenericConfigSection.js.map\n","import React__default from 'react';\nimport { GenericConfigSection } from './GenericConfigSection.js';\n\nvar __defProp = Object.defineProperty;\nvar __defProps = Object.defineProperties;\nvar __getOwnPropDescs = Object.getOwnPropertyDescriptors;\nvar __getOwnPropSymbols = Object.getOwnPropertySymbols;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __propIsEnum = Object.prototype.propertyIsEnumerable;\nvar __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;\nvar __spreadValues = (a, b) => {\n  for (var prop in b || (b = {}))\n    if (__hasOwnProp.call(b, prop))\n      __defNormalProp(a, prop, b[prop]);\n  if (__getOwnPropSymbols)\n    for (var prop of __getOwnPropSymbols(b)) {\n      if (__propIsEnum.call(b, prop))\n        __defNormalProp(a, prop, b[prop]);\n    }\n  return a;\n};\nvar __spreadProps = (a, b) => __defProps(a, __getOwnPropDescs(b));\nvar __objRest = (source, exclude) => {\n  var target = {};\n  for (var prop in source)\n    if (__hasOwnProp.call(source, prop) && exclude.indexOf(prop) < 0)\n      target[prop] = source[prop];\n  if (source != null && __getOwnPropSymbols)\n    for (var prop of __getOwnPropSymbols(source)) {\n      if (exclude.indexOf(prop) < 0 && __propIsEnum.call(source, prop))\n        target[prop] = source[prop];\n    }\n  return target;\n};\nconst ConfigSection = (_a) => {\n  var _b = _a, { children } = _b, props = __objRest(_b, [\"children\"]);\n  return /* @__PURE__ */ React__default.createElement(GenericConfigSection, __spreadProps(__spreadValues({}, props), { kind: \"section\" }), children);\n};\n\nexport { ConfigSection };\n//# sourceMappingURL=ConfigSection.js.map\n","import { E2ESelectors } from '@grafana/e2e-selectors';\n\nexport const Components = {\n  ConfigEditor: {\n    AccessToken: 'data-testid Access Token',\n  },\n  QueryEditor: {\n    QueryType: {\n      container: {\n        ariaLabel: 'Query Type container',\n      },\n    },\n    Owner: {\n      input: 'Query editor owner',\n    },\n    Repository: {\n      input: 'Query editor repository',\n    },\n    Query: {\n      input: 'Query editor query',\n    },\n    Ref: {\n      input: 'Query editor ref',\n    },\n    Number: {\n      input: 'Query editor number',\n    },\n  },\n  AnnotationEditor: {\n    container: 'Annotation editor container',\n  },\n};\n\nexport const selectors: { components: E2ESelectors<typeof Components> } = {\n  components: Components,\n};\n","import { css } from '@emotion/css';\nimport { DataSourcePluginOptionsEditorProps, GrafanaTheme2, onUpdateDatasourceJsonDataOption } from '@grafana/data';\nimport { ConfigSection, DataSourceDescription } from '@grafana/experimental';\nimport { Collapse, Divider, Field, Input, Label, RadioButtonGroup, SecretInput, useStyles2 } from '@grafana/ui';\nimport React, { ChangeEvent, useState } from 'react';\nimport { selectors } from '../components/selectors';\nimport { GithubDataSourceOptions, GithubSecureJsonData } from '../types';\n\nexport type ConfigEditorProps = DataSourcePluginOptionsEditorProps<GithubDataSourceOptions, GithubSecureJsonData>;\n\nconst ConfigEditor = (props: ConfigEditorProps) => {\n  const { jsonData, secureJsonData, secureJsonFields } = props.options;\n  const secureSettings = (secureJsonData || {}) as GithubSecureJsonData;\n  const styles = useStyles2(getStyles);\n\n  const [selectedLicense, setSelectedLicense] = useState(jsonData.githubUrl ? 'github-enterprise' : 'github-basic');\n  const [isOpen, setIsOpen] = useState(true);\n\n  const onSettingUpdate =\n    (prop: string, set = true) =>\n    (event: ChangeEvent<HTMLInputElement>) => {\n      const { onOptionsChange, options } = props;\n      onOptionsChange({\n        ...options,\n        secureJsonData: {\n          ...options.secureJsonData,\n          [prop]: event.target.value,\n        },\n        secureJsonFields: {\n          ...options.secureJsonFields,\n          [prop]: set,\n        },\n      });\n    };\n\n  const onSettingReset = (prop: string) => () => {\n    onSettingUpdate(prop, false)({ target: { value: '' } } as ChangeEvent<HTMLInputElement>);\n  };\n\n  const onLicenseChange = (value: string) => {\n    if (value === 'github-basic') {\n      jsonData.githubUrl = '';\n    }\n\n    setSelectedLicense(value);\n  };\n\n  const licenseOptions = [\n    { label: 'Basic', value: 'github-basic' },\n    { label: 'Enterprise', value: 'github-enterprise' },\n  ];\n\n  const WIDTH_LONG = 40;\n\n  return (\n    <>\n      <DataSourceDescription\n        dataSourceName=\"GitHub\"\n        docsLink=\"https://grafana.com/grafana/plugins/grafana-github-datasource/\"\n        hasRequiredFields={false}\n      />\n\n      <Divider />\n\n      <Collapse collapsible label=\"Access Token Permissions\" isOpen={isOpen} onToggle={() => setIsOpen((x) => !x)}>\n        <p>\n          To create a new Access Token, navigate to{' '}\n          <a className={styles.externalLink} href=\"https://github.com/settings/tokens\" target=\"_blank\" rel=\"noreferrer\">\n            Personal Access Tokens\n          </a>{' '}\n          and create a click &quot;Generate new token.&quot;\n        </p>\n\n        <p>Ensure that your token has the following permissions:</p>\n\n        <b>For all repositories:</b>\n        <pre>public_repo, repo:status, repo_deployment, read:packages, read:user, user:email</pre>\n\n        <b>For Github projects:</b>\n        <pre>read:org, read:project</pre>\n\n        <b>An extra setting is required for private repositories:</b>\n        <pre>repo (Full control of private repositories)</pre>\n      </Collapse>\n\n      <Divider />\n\n      <ConfigSection title=\"Connection\">\n        <Field label=\"Access Token\">\n          <SecretInput\n            placeholder=\"GitHub Personal Access Token\"\n            data-testid={selectors.components.ConfigEditor.AccessToken}\n            value={secureSettings.accessToken || ''}\n            isConfigured={secureJsonFields!['accessToken']}\n            onChange={onSettingUpdate('accessToken', false)}\n            onReset={onSettingReset('accessToken')}\n            width={WIDTH_LONG}\n          />\n        </Field>\n      </ConfigSection>\n\n      <Divider />\n\n      <ConfigSection title=\"Additional Settings\" isCollapsible>\n        <Label>GitHub License</Label>\n        <RadioButtonGroup\n          options={licenseOptions}\n          value={selectedLicense}\n          onChange={onLicenseChange}\n          className={styles.radioButton}\n        />\n\n        {selectedLicense === 'github-enterprise' && (\n          <Field label=\"GitHub Enterprise URL\">\n            <Input\n              placeholder=\"URL of GitHub Enterprise\"\n              value={jsonData.githubUrl}\n              onChange={onUpdateDatasourceJsonDataOption(props, 'githubUrl')}\n              width={WIDTH_LONG}\n            />\n          </Field>\n        )}\n      </ConfigSection>\n    </>\n  );\n};\n\nconst getStyles = (theme: GrafanaTheme2) => {\n  return {\n    externalLink: css`\n      text-decoration: underline;\n    `,\n    radioButton: css`\n      margin-bottom: ${theme.spacing(2)};\n    `,\n  };\n};\n\nexport default ConfigEditor;\n","import React, { InputHTMLAttributes, FunctionComponent } from 'react';\nimport { InlineFormLabel } from '@grafana/ui';\n\nexport interface Props extends InputHTMLAttributes<HTMLInputElement> {\n  label: string;\n  tooltip?: string;\n  labelWidth?: number;\n  children?: React.ReactNode;\n}\n\nexport const QueryField: FunctionComponent<Partial<Props>> = ({ label, labelWidth = 8, tooltip, children }) => (\n  <>\n    <InlineFormLabel width={labelWidth} className=\"query-keyword\" tooltip={tooltip}>\n      {label}\n    </InlineFormLabel>\n    {children}\n  </>\n);\n\nexport const QueryRowTerminator = () => {\n  return (\n    <div className=\"gf-form gf-form--grow\">\n      <div className=\"gf-form-label gf-form-label--grow\" />\n    </div>\n  );\n};\n\nexport const QueryInlineField = ({ ...props }) => {\n  return (\n    <QueryEditorRow>\n      <QueryField {...props} />\n    </QueryEditorRow>\n  );\n};\n\nexport const QueryEditorRow = (props: any) => {\n  return (\n    <div className=\"gf-form-inline\">\n      {props.children}\n      <QueryRowTerminator />\n    </div>\n  );\n};\n","import React, { useState, useEffect } from 'react';\nimport { Input, InlineFormLabel } from '@grafana/ui';\n\nimport { QueryEditorRow } from '../components/Forms';\nimport { RepositoryOptions } from '../types';\nimport { RightColumnWidth, LeftColumnWidth } from './QueryEditor';\nimport { selectors } from '../components/selectors';\n\ninterface Props extends RepositoryOptions {\n  onChange: (value: RepositoryOptions) => void;\n}\n\nconst QueryEditorRepositories = (props: Props) => {\n  const [repository, setRepository] = useState<string>(props.repository || '');\n  const [owner, setOwner] = useState<string>(props.owner || '');\n\n  useEffect(() => {\n    setRepository(props.repository || '');\n  }, [props.repository]);\n\n  useEffect(() => {\n    setOwner(props.owner || '');\n  }, [props.owner]);\n\n  return (\n    <QueryEditorRow>\n      <InlineFormLabel\n        className=\"query-keyword\"\n        tooltip=\"The owner (organization or user) of the GitHub repository (example: 'grafana')\"\n        width={LeftColumnWidth}\n      >\n        Owner\n      </InlineFormLabel>\n      <Input\n        aria-label={selectors.components.QueryEditor.Owner.input}\n        width={RightColumnWidth}\n        value={owner}\n        onChange={(el) => setOwner(el.currentTarget.value)}\n        onBlur={(el) =>\n          props.onChange({\n            ...props,\n            owner: el.currentTarget.value,\n          })\n        }\n      />\n      <InlineFormLabel className=\"query-keyword\" tooltip=\"The name of the GitHub repository\" width={LeftColumnWidth}>\n        Repository\n      </InlineFormLabel>\n      <Input\n        aria-label={selectors.components.QueryEditor.Repository.input}\n        width={RightColumnWidth}\n        value={repository}\n        onChange={(el) => setRepository(el.currentTarget.value)}\n        onBlur={(el) =>\n          props.onChange({\n            ...props,\n            repository: el.currentTarget.value,\n          })\n        }\n      />\n    </QueryEditorRow>\n  );\n};\n\nexport default QueryEditorRepositories;\n","import React from 'react';\n\nconst QueryEditorReleases = () => <></>;\n\nexport default QueryEditorReleases;\n","import React, { useState } from 'react';\nimport { Input } from '@grafana/ui';\n\nimport { QueryInlineField } from '../components/Forms';\nimport { CommitsOptions } from '../types';\nimport { RightColumnWidth, LeftColumnWidth } from './QueryEditor';\nimport { selectors } from 'components/selectors';\n\ninterface Props extends CommitsOptions {\n  onChange: (value: CommitsOptions) => void;\n}\n\nconst QueryEditorCommits = (props: Props) => {\n  const [ref, setRef] = useState<string>(props.gitRef || '');\n  return (\n    <>\n      <QueryInlineField labelWidth={LeftColumnWidth} label=\"Ref (Branch / Tag)\">\n        <Input\n          aria-label={selectors.components.QueryEditor.Ref.input}\n          width={RightColumnWidth}\n          value={ref}\n          onChange={(el) => setRef(el.currentTarget.value)}\n          onBlur={(el) => props.onChange({ ...props, gitRef: el.currentTarget.value })}\n        />\n      </QueryInlineField>\n    </>\n  );\n};\n\nexport default QueryEditorCommits;\n","import React, { useState } from 'react';\n\nimport { Input, Select } from '@grafana/ui';\nimport { SelectableValue } from '@grafana/data';\n\nimport { QueryInlineField } from '../components/Forms';\nimport { IssuesOptions, IssueTimeField } from '../types';\nimport { RightColumnWidth, LeftColumnWidth } from './QueryEditor';\n\ninterface Props extends IssuesOptions {\n  onChange: (value: IssuesOptions) => void;\n}\n\nconst timeFieldOptions: Array<SelectableValue<IssueTimeField>> = Object.keys(IssueTimeField)\n  .filter((_, i) => IssueTimeField[i] !== undefined)\n  .map((_, i) => {\n    return {\n      label: `${IssueTimeField[i]}`,\n      value: i as IssueTimeField,\n    };\n  });\n\nconst defaultTimeField = 0 as IssueTimeField;\n\nconst QueryEditorIssues = (props: Props) => {\n  const [query, setQuery] = useState<string>(props.query || '');\n  return (\n    <>\n      <QueryInlineField\n        labelWidth={LeftColumnWidth}\n        label=\"Query\"\n        tooltip=\"For more information, visit https://docs.github.com/en/github/searching-for-information-on-github/searching-issues-and-pull-requests\"\n      >\n        <Input\n          value={query}\n          width={RightColumnWidth * 2 + LeftColumnWidth}\n          onChange={(el) => setQuery(el.currentTarget.value)}\n          onBlur={(el) =>\n            props.onChange({\n              ...props,\n              query: el.currentTarget.value,\n            })\n          }\n        />\n      </QueryInlineField>\n      <QueryInlineField\n        labelWidth={LeftColumnWidth}\n        label=\"Time Field\"\n        tooltip=\"The time field to filter on the time range\"\n      >\n        <Select\n          width={RightColumnWidth}\n          options={timeFieldOptions}\n          value={props.timeField || defaultTimeField}\n          onChange={(opt) =>\n            props.onChange({\n              ...props,\n              timeField: opt.value,\n            })\n          }\n        />\n      </QueryInlineField>\n    </>\n  );\n};\n\nexport default QueryEditorIssues;\n","import React, { useState } from 'react';\n\nimport { Input } from '@grafana/ui';\n\nimport { QueryInlineField } from '../components/Forms';\nimport { MilestonesOptions } from '../types';\nimport { RightColumnWidth, LeftColumnWidth } from './QueryEditor';\n\ninterface Props extends MilestonesOptions {\n  onChange: (value: MilestonesOptions) => void;\n}\n\nconst QueryEditorMilestones = (props: Props) => {\n  const [query, setQuery] = useState<string>(props.query || '');\n  return (\n    <>\n      <QueryInlineField labelWidth={LeftColumnWidth} label=\"Query\" tooltip=\"Query milestones by title\">\n        <Input\n          value={query}\n          width={RightColumnWidth * 2 + LeftColumnWidth}\n          onChange={(el) => setQuery(el.currentTarget.value)}\n          onBlur={(el) =>\n            props.onChange({\n              ...props,\n              query: el.currentTarget.value,\n            })\n          }\n        />\n      </QueryInlineField>\n    </>\n  );\n};\n\nexport default QueryEditorMilestones;\n","import React, { useState } from 'react';\n\nimport { Input, Select } from '@grafana/ui';\nimport { SelectableValue } from '@grafana/data';\n\nimport { QueryInlineField } from '../components/Forms';\nimport { PullRequestsOptions, PullRequestTimeField } from '../types';\n\nimport { RightColumnWidth, LeftColumnWidth } from './QueryEditor';\n\ninterface Props extends PullRequestsOptions {\n  onChange: (value: PullRequestsOptions) => void;\n}\n\nconst timeFieldOptions: Array<SelectableValue<PullRequestTimeField>> = Object.keys(PullRequestTimeField)\n  .filter((_, i) => PullRequestTimeField[i] !== undefined)\n  .map((_, i) => {\n    return {\n      label: `${PullRequestTimeField[i]}`,\n      value: i as PullRequestTimeField,\n    };\n  });\n\nconst defaultTimeField = timeFieldOptions[0].value;\n\nconst QueryEditorPullRequests = (props: Props) => {\n  const [query, setQuery] = useState<string>(props.query || '');\n  return (\n    <>\n      <QueryInlineField\n        labelWidth={LeftColumnWidth}\n        label=\"Query\"\n        tooltip=\"For more information, visit https://docs.github.com/en/github/searching-for-information-on-github/searching-issues-and-pull-requests\"\n      >\n        <Input\n          value={query}\n          width={RightColumnWidth}\n          onChange={(el) => setQuery(el.currentTarget.value)}\n          onBlur={(el) =>\n            props.onChange({\n              ...props,\n              query: el.currentTarget.value,\n            })\n          }\n        />\n      </QueryInlineField>\n      <QueryInlineField\n        labelWidth={LeftColumnWidth}\n        label=\"Time Field\"\n        tooltip=\"The time field to filter on the time range. WARNING: If selecting 'None', be mindful of the amount of data being queried. On larger repositories, querying all pull requests could easily cause rate limiting\"\n      >\n        <Select\n          width={RightColumnWidth}\n          options={timeFieldOptions}\n          value={props.timeField || defaultTimeField}\n          onChange={(opt) =>\n            props.onChange({\n              ...props,\n              timeField: opt.value,\n            })\n          }\n        />\n      </QueryInlineField>\n    </>\n  );\n};\n\nexport default QueryEditorPullRequests;\n","import React from 'react';\n\nconst QueryEditorTags = () => <></>;\nexport default QueryEditorTags;\n","import React, { useState } from 'react';\nimport { Input } from '@grafana/ui';\n\nimport { QueryInlineField } from '../components/Forms';\nimport { ContributorsOptions } from '../types';\nimport { RightColumnWidth, LeftColumnWidth } from './QueryEditor';\n\ninterface Props extends ContributorsOptions {\n  onChange: (value: ContributorsOptions) => void;\n}\n\nconst QueryEditorContributors = (props: Props) => {\n  const [query, setQuery] = useState<string>(props.query || '');\n  return (\n    <>\n      <QueryInlineField labelWidth={LeftColumnWidth} label=\"Query (optional)\">\n        <Input\n          width={RightColumnWidth}\n          value={query}\n          onChange={(el) => setQuery(el.currentTarget.value)}\n          onBlur={(el) => props.onChange({ ...props, query: el.currentTarget.value })}\n        />\n      </QueryInlineField>\n    </>\n  );\n};\n\nexport default QueryEditorContributors;\n","import React, { useState } from 'react';\nimport { Input } from '@grafana/ui';\n\nimport { QueryInlineField } from '../components/Forms';\nimport { LabelsOptions } from '../types';\nimport { RightColumnWidth, LeftColumnWidth } from './QueryEditor';\n\ninterface Props extends LabelsOptions {\n  onChange: (value: LabelsOptions) => void;\n}\n\nconst QueryEditorLabels = (props: Props) => {\n  const [query, setQuery] = useState<string>(props.query || '');\n  return (\n    <>\n      <QueryInlineField labelWidth={LeftColumnWidth} label=\"Query (optional)\">\n        <Input\n          width={RightColumnWidth}\n          value={query}\n          onChange={(el) => setQuery(el.currentTarget.value)}\n          onBlur={(el) => props.onChange({ ...props, query: el.currentTarget.value })}\n        />\n      </QueryInlineField>\n    </>\n  );\n};\n\nexport default QueryEditorLabels;\n","import React, { useState } from 'react';\n\nimport { Input, Select } from '@grafana/ui';\nimport { SelectableValue } from '@grafana/data';\n\nimport { QueryInlineField } from '../components/Forms';\nimport { PackagesOptions, PackageType } from '../types';\nimport { RightColumnWidth, LeftColumnWidth } from './QueryEditor';\n\ninterface Props extends PackagesOptions {\n  onChange: (value: PackagesOptions) => void;\n}\n\nconst DefaultPackageType = PackageType.NPM;\n\nconst packageTypeOptions: Array<SelectableValue<string>> = Object.keys(PackageType).map((v) => {\n  return {\n    label: v.replace('/_/gi', ' '),\n    value: v,\n  };\n});\n\nconst QueryEditorPackages = (props: Props) => {\n  const [names, setNames] = useState<string>(props.names || '');\n\n  return (\n    <>\n      <QueryInlineField labelWidth={LeftColumnWidth} label=\"Package type\">\n        <Select\n          options={packageTypeOptions}\n          value={props.packageType || DefaultPackageType}\n          width={RightColumnWidth}\n          onChange={(opt) =>\n            props.onChange({\n              ...props,\n              packageType: opt.value as PackageType,\n            })\n          }\n        />\n      </QueryInlineField>\n      <QueryInlineField\n        labelWidth={LeftColumnWidth}\n        label=\"Names\"\n        tooltip=\"Search for packages using a comma delimited list of names\"\n      >\n        <Input\n          value={names}\n          width={RightColumnWidth * 2 + LeftColumnWidth}\n          onChange={(el) => setNames(el.currentTarget.value)}\n          onBlur={(el) =>\n            props.onChange({\n              ...props.query,\n              names: el.currentTarget.value,\n            })\n          }\n        />\n      </QueryInlineField>\n    </>\n  );\n};\n\nexport default QueryEditorPackages;\n","import React, { useState } from 'react';\nimport { Input } from '@grafana/ui';\n\nimport { QueryInlineField } from '../components/Forms';\nimport { LabelsOptions } from '../types';\nimport { RightColumnWidth, LeftColumnWidth } from './QueryEditor';\n\ninterface Props extends LabelsOptions {\n  onChange: (value: LabelsOptions) => void;\n}\n\nconst QueryEditorVulnerabilities = (props: Props) => {\n  const [query, setQuery] = useState<string>(props.query || '');\n  return (\n    <>\n      <QueryInlineField labelWidth={LeftColumnWidth} label=\"Query (optional)\">\n        <Input\n          width={RightColumnWidth}\n          value={query}\n          onChange={(el) => setQuery(el.currentTarget.value)}\n          onBlur={(el) => props.onChange({ ...props, query: el.currentTarget.value })}\n        />\n      </QueryInlineField>\n    </>\n  );\n};\n\nexport default QueryEditorVulnerabilities;\n","import React, { useState } from 'react';\nimport { Icon, SegmentAsync, Segment } from '@grafana/ui';\nimport { SelectableValue } from '@grafana/data';\nimport { css } from '@emotion/css';\n\ninterface Props {\n  value?: Filter[];\n  onChange: (filters: Filter[]) => void;\n  loadOptions: (filter?: string) => Promise<Array<SelectableValue<string>>>;\n  ops: Array<SelectableValue<string>>;\n}\n\nexport const Filters: React.FC<Props> = (props: Props) => {\n  const { value, onChange } = props;\n  const defaultFilters: Filter[] = [];\n  const [filters, setFilters] = useState<Filter[]>(value || defaultFilters);\n  const [loading, setLoading] = useState<number>();\n\n  const add = () => {\n    setFilters([...filters, { key: '', value: '', op: props.ops[0]?.value || '=' }]);\n  };\n\n  const onKeyChange = (index: number) => (selected: SelectableValue) => {\n    const update = filters.map((f, i) => (i === index ? { ...f, key: selected.value, value: '' } : f));\n    setFilters(update);\n  };\n\n  const onValueChange = (index: number) => (selected: SelectableValue) => {\n    const update = filters.map((f, i) => (i === index ? { ...f, value: selected.value } : f));\n    changeFilters(update);\n  };\n\n  const onOpChange = (index: number) => (selected: SelectableValue) => {\n    const update = filters.map((f, i) => (i === index ? { ...f, op: selected.value } : f));\n    changeFilters(update);\n  };\n\n  const onConjunctionChange = (index: number) => (selected: SelectableValue) => {\n    const update = filters.map((f, i) => (i === index ? { ...f, conjunction: selected.value } : f));\n    changeFilters(update);\n  };\n\n  const remove = (index: number) => () => {\n    const update = filters.filter((f, i) => i !== index);\n    changeFilters(update);\n  };\n\n  function changeFilters(filters: Filter[]) {\n    setFilters(filters);\n    onChange(filters);\n  }\n\n  const loadValues = (index: number) => async () => {\n    setLoading(index);\n    const key = filters[index].key;\n    const opts = await props.loadOptions(key);\n    setLoading(undefined);\n    return opts;\n  };\n\n  const list = filters || [];\n\n  const ops = ['and', 'or'];\n  const opList = ops.map((op) => ({ label: op, value: op }));\n\n  const styles = {\n    loading: css`\n      position: absolute;\n      top: 0;\n      padding: 8px 10px;\n      font-weight: 500;\n      font-size: 12px;\n    `,\n    wrapper: css`\n      position: relative;\n    `,\n  };\n\n  return (\n    <div className=\"gf-form-inline\">\n      {list.map((filter: Filter, i: number) => (\n        <>\n          <SegmentAsync\n            loadOptions={props.loadOptions}\n            placeholder=\"Key...\"\n            allowCustomValue={true}\n            value={filter.key}\n            onChange={onKeyChange(i)}\n          />\n          <Segment placeholder=\"Operator...\" value={filter.op} onChange={onOpChange(i)} options={props.ops} />\n          <span className={styles.wrapper}>\n            <SegmentAsync\n              loadOptions={loadValues(i)}\n              placeholder=\"Value...\"\n              allowCustomValue={true}\n              value={filter.value}\n              onChange={onValueChange(i)}\n            />\n            {loading === i && <div className={styles.loading}>Loading...</div>}\n          </span>\n          <a className=\"gf-form-label query-part\" onClick={remove(i)}>\n            <Icon name=\"trash-alt\" />\n          </a>\n          {list.length > 1 && i !== list.length - 1 && (\n            <Segment onChange={onConjunctionChange(i)} options={opList} value={filter.conjunction || 'and'}></Segment>\n          )}\n        </>\n      ))}\n      <a className=\"gf-form gf-form-label query-part\" onClick={add}>\n        <Icon name=\"plus\" />\n      </a>\n    </div>\n  );\n};\n\nFilters.displayName = 'Filters';\n\nexport interface Filter {\n  key: string;\n  value: string;\n  op?: string;\n  conjunction?: string;\n}\n","import React, { useState } from 'react';\nimport { Input, InlineFormLabel, RadioButtonGroup } from '@grafana/ui';\n\nimport { QueryEditorRow } from '../components/Forms';\nimport { RightColumnWidth, LeftColumnWidth } from './QueryEditor';\nimport { selectors } from '../components/selectors';\nimport { ProjectsOptions, ProjectQueryType } from 'types';\nimport { SelectableValue } from '@grafana/data';\nimport { Filter, Filters } from 'components/Filters';\n\ninterface Props extends ProjectsOptions {\n  onChange: (value: ProjectsOptions) => void;\n}\n\nconst queryTypes = [\n  { label: 'Organization', value: ProjectQueryType.ORG },\n  { label: 'User', value: ProjectQueryType.USER },\n];\n\nconst filters: Array<SelectableValue<string>> = [\n  { label: 'Type', value: 'type' },\n  { label: 'Created At', value: 'created_at' },\n  { label: 'Title', value: 'Title' },\n  { label: 'Assignees', value: 'Assignees' },\n  { label: 'Status', value: 'Status' },\n  { label: 'Labels', value: 'Labels' },\n  { label: 'Reviewers', value: 'Reviewers' },\n  { label: 'Milestone', value: 'Milestone' },\n  { label: 'Iteration', value: 'Iteration' },\n];\n\nconst ops: Array<SelectableValue<string>> = [\n  { label: 'Equal', value: '=' },\n  { label: 'Not Equal', value: '!=' },\n  { label: 'Greater Than', value: '>' },\n  { label: 'Less Than', value: '<' },\n  { label: 'Less Than or Equal', value: '<=' },\n  { label: 'Greater Than or Equal', value: '>=' },\n  { label: 'Contains', value: '~' },\n];\n\nconst fetchFilters = async (key?: string) => (key ? [] : filters);\n\nconst QueryEditorProjects = (props: Props) => {\n  const [org, setOrg] = useState<string>(props.organization || '');\n  const [user, setUser] = useState<string>(props.user || '');\n  const [number, setNumber] = useState<number | string | undefined>(props.number);\n  const [kind, setKind] = useState<ProjectQueryType>(props.kind || ProjectQueryType.ORG);\n  const [filters, setFilters] = useState<Filter[]>(props.filters || []);\n  const label = kind === ProjectQueryType.ORG ? 'Organization' : 'User';\n  const tooltip =\n    kind === ProjectQueryType.ORG\n      ? \"The organization for the GitHub project (example: 'grafana)\"\n      : 'The user who owns the Github project';\n\n  return (\n    <>\n      <QueryEditorRow>\n        <InlineFormLabel\n          className=\"query-keyword\"\n          tooltip=\"The owner of the GitHub project. Does not support classic projects.\"\n          width={LeftColumnWidth}\n        >\n          Project Owner\n        </InlineFormLabel>\n        <div className=\"gf-form\">\n          <RadioButtonGroup<ProjectQueryType>\n            options={queryTypes}\n            value={kind}\n            onChange={(v) => {\n              setKind(v);\n              props.onChange({\n                ...props,\n                kind: v,\n              });\n            }}\n            size={'md'}\n          />\n        </div>\n      </QueryEditorRow>\n\n      <QueryEditorRow>\n        <InlineFormLabel className=\"query-keyword\" tooltip={tooltip} width={LeftColumnWidth}>\n          {label}\n        </InlineFormLabel>\n        {kind === ProjectQueryType.ORG && (\n          <Input\n            aria-label={selectors.components.QueryEditor.Owner.input}\n            width={RightColumnWidth}\n            value={org}\n            onChange={(el) => setOrg(el.currentTarget.value)}\n            onBlur={(el) =>\n              props.onChange({\n                ...props,\n                organization: el.currentTarget.value,\n                kind,\n              })\n            }\n          />\n        )}\n        {kind === ProjectQueryType.USER && (\n          <Input\n            aria-label={selectors.components.QueryEditor.Owner.input}\n            width={RightColumnWidth}\n            value={user}\n            onChange={(el) => setUser(el.currentTarget.value)}\n            onBlur={(el) =>\n              props.onChange({\n                ...props,\n                user: el.currentTarget.value,\n                kind,\n              })\n            }\n          />\n        )}\n      </QueryEditorRow>\n\n      <QueryEditorRow>\n        <InlineFormLabel\n          className=\"query-keyword\"\n          tooltip=\"The project number for the GitHub project (example: 123). Does not support classic projects.\"\n          width={LeftColumnWidth}\n        >\n          Project Number\n        </InlineFormLabel>\n        <Input\n          aria-label={selectors.components.QueryEditor.Number.input}\n          width={RightColumnWidth}\n          value={number}\n          onChange={(el) => setNumber(num(el.currentTarget.value))}\n          onBlur={(el) =>\n            props.onChange({\n              ...props,\n              number: num(el.currentTarget.value),\n            })\n          }\n        />\n      </QueryEditorRow>\n\n      {/* Filters currently only apply to Project Items */}\n      {number && (\n        <QueryEditorRow>\n          <div className=\"gf-form\">\n            <InlineFormLabel className=\"query-keyword\" width={LeftColumnWidth}>\n              Filters\n            </InlineFormLabel>\n            <Filters\n              onChange={(filters: Filter[]) => {\n                setFilters(filters);\n                props.onChange({\n                  ...props,\n                  filters,\n                });\n              }}\n              loadOptions={fetchFilters}\n              value={filters}\n              ops={ops}\n            ></Filters>\n          </div>\n        </QueryEditorRow>\n      )}\n    </>\n  );\n};\n\nfunction num(v: string) {\n  if (v.includes('$')) {\n    return v;\n  }\n  const val = parseInt(v, 10);\n  return isNaN(val) ? undefined : val;\n}\n\nexport default QueryEditorProjects;\n","import React from 'react';\nimport { QueryInlineField } from '../components/Forms';\nimport { Select } from '@grafana/ui';\nimport { RightColumnWidth, LeftColumnWidth } from './QueryEditor';\nimport { WorkflowsOptions, WorkflowsTimeField } from 'types';\nimport { SelectableValue } from '@grafana/data';\n\ninterface Props extends WorkflowsOptions {\n  onChange: (value: WorkflowsOptions) => void;\n}\n\nconst timeFieldOptions: Array<SelectableValue<WorkflowsTimeField>> = Object.keys(WorkflowsTimeField)\n  .filter((_, i) => WorkflowsTimeField[i] !== undefined)\n  .map((_, i) => {\n    return {\n      label: `${WorkflowsTimeField[i]}`,\n      value: i as WorkflowsTimeField,\n    };\n  });\n\nconst defaultTimeField = 0 as WorkflowsTimeField;\n\nconst QueryEditorWorkflows = (props: Props) => {\n  return (\n    <>\n      <QueryInlineField\n        labelWidth={LeftColumnWidth}\n        label=\"Time Field\"\n        tooltip=\"The time field to filter on the time range\"\n      >\n        <Select\n          width={RightColumnWidth}\n          options={timeFieldOptions}\n          value={props.timeField || defaultTimeField}\n          onChange={(opt) => {\n            props.onChange({\n              ...props,\n              timeField: opt.value,\n            });\n          }}\n        />\n      </QueryInlineField>\n    </>\n  );\n};\n\nexport default QueryEditorWorkflows;\n","import React, { useState } from 'react';\nimport { QueryInlineField } from '../components/Forms';\nimport { Input } from '@grafana/ui';\nimport { RightColumnWidth, LeftColumnWidth } from './QueryEditor';\nimport { WorkflowUsageOptions } from 'types';\n\ninterface Props extends WorkflowUsageOptions {\n  onChange: (value: WorkflowUsageOptions) => void;\n}\n\nconst QueryEditorWorkflowUsage = (props: Props) => {\n  const [workflow, setWorkflow] = useState<string | undefined>(props.workflow);\n\n  return (\n    <>\n      <QueryInlineField\n        labelWidth={LeftColumnWidth}\n        label=\"Workflow\"\n        tooltip=\"The workflow id number or file name (e.g my-workflow.yml)\"\n      >\n        <Input\n          value={workflow}\n          width={RightColumnWidth * 2 + LeftColumnWidth}\n          onChange={(el) => setWorkflow(el.currentTarget.value)}\n          onBlur={(el) =>\n            props.onChange({\n              ...props,\n              workflow: el.currentTarget.value,\n            })\n          }\n        />\n      </QueryInlineField>\n    </>\n  );\n};\n\nexport default QueryEditorWorkflowUsage;\n","import React, { ReactNode, useCallback } from 'react';\nimport { QueryEditorProps, SelectableValue } from '@grafana/data';\nimport { Select } from '@grafana/ui';\n\nimport { GithubDataSource } from '../DataSource';\nimport { GithubDataSourceOptions, GitHubQuery, QueryType, DefaultQueryType } from '../types';\nimport { QueryInlineField } from '../components/Forms';\nimport { isValid } from '../validation';\nimport { Components } from './../components/selectors';\n\nimport QueryEditorRepository from './QueryEditorRepository';\nimport QueryEditorReleases from './QueryEditorReleases';\nimport QueryEditorCommits from './QueryEditorCommits';\nimport QueryEditorIssues from './QueryEditorIssues';\nimport QueryEditorMilestones from './QueryEditorMilestones';\nimport QueryEditorPullRequests from './QueryEditorPullRequests';\nimport QueryEditorTags from './QueryEditorTags';\nimport QueryEditorContributors from './QueryEditorContributors';\nimport QueryEditorLabels from './QueryEditorLabels';\nimport QueryEditorPackages from './QueryEditorPackages';\nimport QueryEditorVulnerabilities from './QueryEditorVulnerabilities';\nimport QueryEditorProjects from './QueryEditorProjects';\nimport QueryEditorWorkflows from './QueryEditorWorkflows';\nimport QueryEditorWorkflowUsage from './QueryEditorWorkflowUsage';\n\ninterface Props extends QueryEditorProps<GithubDataSource, GitHubQuery, GithubDataSourceOptions> {\n  queryTypes?: string[];\n}\nexport const LeftColumnWidth = 10;\nexport const RightColumnWidth = 36;\n\n/* eslint-disable react/display-name */\nconst queryEditors: {\n  [key: string]: { component: (props: Props, onChange: (val: any) => void) => ReactNode };\n} = {\n  [QueryType.Repositories]: {\n    component: (_: Props, onChange: (val: any) => void) => <></>,\n  },\n  [QueryType.Labels]: {\n    component: (props: Props, onChange: (val: any) => void) => (\n      <QueryEditorLabels {...(props.query.options || {})} onChange={onChange} />\n    ),\n  },\n  [QueryType.Contributors]: {\n    component: (props: Props, onChange: (val: any) => void) => (\n      <QueryEditorContributors {...(props.query.options || {})} onChange={onChange} />\n    ),\n  },\n  [QueryType.Tags]: {\n    component: (props: Props, _: (val: any) => void) => <QueryEditorTags {...(props.query.options || {})} />,\n  },\n  [QueryType.Releases]: {\n    component: (props: Props, _: (val: any) => void) => <QueryEditorReleases {...(props.query.options || {})} />,\n  },\n  [QueryType.Commits]: {\n    component: (props: Props, onChange: (val: any) => void) => (\n      <QueryEditorCommits {...(props.query.options || {})} onChange={onChange} />\n    ),\n  },\n  [QueryType.Milestones]: {\n    component: (props: Props, onChange: (val: any) => void) => (\n      <QueryEditorMilestones {...(props.query.options || {})} onChange={onChange} />\n    ),\n  },\n  [QueryType.Issues]: {\n    component: (props: Props, onChange: (val: any) => void) => (\n      <QueryEditorIssues {...(props.query.options || {})} onChange={onChange} />\n    ),\n  },\n  [QueryType.Packages]: {\n    component: (props: Props, onChange: (val: any) => void) => (\n      <QueryEditorPackages {...(props.query.options || {})} onChange={onChange} />\n    ),\n  },\n  [QueryType.Pull_Requests]: {\n    component: (props: Props, onChange: (val: any) => void) => (\n      <QueryEditorPullRequests {...(props.query.options || {})} onChange={onChange} />\n    ),\n  },\n  [QueryType.Vulnerabilities]: {\n    component: (props: Props, onChange: (val: any) => void) => (\n      <QueryEditorVulnerabilities {...(props.query.options || {})} onChange={onChange} />\n    ),\n  },\n  [QueryType.Projects]: {\n    component: (props: Props, onChange: (val: any) => void) => (\n      <QueryEditorProjects {...(props.query.options || {})} onChange={onChange} />\n    ),\n  },\n  [QueryType.Stargazers]: {\n    component: (_: Props, onChange: (val: any) => void) => <></>,\n  },\n  [QueryType.Workflows]: {\n    component: (props: Props, onChange: (val: any) => void) => (\n      <QueryEditorWorkflows {...(props.query.options || {})} onChange={onChange} />\n    ),\n  },\n  [QueryType.Workflow_Usage]: {\n    component: (props: Props, onChange: (val: any) => void) => (\n      <QueryEditorWorkflowUsage {...(props.query.options || {})} onChange={onChange} />\n    ),\n  },\n};\n\n/* eslint-enable react/display-name */\n\nconst queryTypeOptions: Array<SelectableValue<string>> = Object.keys(QueryType).map((v) => {\n  return {\n    label: v.replace(/_/gi, ' '),\n    value: v,\n  };\n});\n\nconst QueryEditor = (props: Props) => {\n  const onChange = useCallback(\n    (value: GitHubQuery) => {\n      props.onChange(value);\n\n      if (isValid(value)) {\n        props.onRunQuery();\n      }\n    },\n    [props]\n  );\n\n  const onKeyChange = useCallback(\n    (key: string, value: any) => {\n      onChange({\n        ...props.query,\n        [key]: value,\n      });\n    },\n    [onChange, props.query]\n  );\n\n  const queryEditor = queryEditors[props.query.queryType || DefaultQueryType];\n  const queryTypes = props.queryTypes || Object.keys(queryEditors);\n\n  return (\n    <>\n      <QueryInlineField label=\"Query Type\" tooltip=\"What resource are you querying for?\" labelWidth={LeftColumnWidth}>\n        <div aria-label={Components.QueryEditor.QueryType.container.ariaLabel}>\n          <Select\n            menuShouldPortal={true}\n            width={RightColumnWidth}\n            options={queryTypeOptions.filter((v) => queryTypes.includes(v.value!))}\n            value={props.query.queryType}\n            onChange={(val) => onKeyChange('queryType', val.value || DefaultQueryType)}\n          />\n        </div>\n      </QueryInlineField>\n\n      {hasRepo(props.query.queryType) && (\n        <QueryEditorRepository\n          repository={props.query.repository}\n          owner={props.query.owner}\n          onChange={(repo) => {\n            onChange({\n              ...props.query,\n              ...repo,\n            });\n          }}\n        ></QueryEditorRepository>\n      )}\n\n      {queryEditor ? (\n        queryEditor.component(props, (value: any) => onKeyChange('options', !!value ? value : undefined))\n      ) : (\n        <span>Unsupported Query Type</span>\n      )}\n    </>\n  );\n};\n\nconst nonRepoTypes = [QueryType.Projects, QueryType.ProjectItems];\n\nfunction hasRepo(qt?: string) {\n  return !nonRepoTypes.includes(qt as QueryType);\n}\n\nexport default QueryEditor;\n","import React from 'react';\nimport { Select, Spinner } from '@grafana/ui';\nimport { css } from '@emotion/css';\n\ninterface Props {\n  onChange: (value: string) => void;\n  value?: string;\n  options: string[];\n  width: number;\n  loading: boolean;\n}\n\nconst containerCss = css`\n  align-items: center;\n`;\n\nconst spannerCss = css`\n  margin: 0px 3px;\n  padding: 0px 3px;\n`;\n\nconst FieldSelect = (props: Props) => {\n  const { onChange, options, value, width, loading } = props;\n  return (\n    <div className={`${containerCss} gf-form-inline`}>\n      <Select\n        allowCustomValue\n        value={value}\n        onChange={(opt) => onChange(opt.value!)}\n        width={width}\n        disabled={loading}\n        placeholder={loading ? 'Loading...' : 'Select...'}\n        options={options.map((opt) => {\n          return {\n            label: opt,\n            value: opt,\n          };\n        })}\n      />\n      {loading && (\n        <div>\n          <Spinner className={spannerCss} />\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default FieldSelect;\n","import React, { useMemo, useState } from 'react';\n\nimport QueryEditor from './QueryEditor';\nimport { GithubDataSource } from '../DataSource';\nimport { GitHubVariableQuery, DefaultQueryType, QueryType } from '../types';\nimport { QueryInlineField } from '../components/Forms';\nimport FieldSelect from '../components/FieldSelect';\nimport { isValid } from '../validation';\n\ninterface Props {\n  query: GitHubVariableQuery;\n  onChange: (query: GitHubVariableQuery, definition: string) => void;\n  datasource: GithubDataSource;\n}\n\nconst VariableQueryEditor = (props: Props) => {\n  const definition = `${props.datasource.name} - ${props.query.queryType || DefaultQueryType}`;\n  const [choices, setChoices] = useState<string[]>();\n\n  useMemo(async () => {\n    if (isValid(props.query)) {\n      setChoices(await props.datasource.getChoices(props.query));\n    }\n  }, [props.query, props.datasource]);\n\n  return (\n    <>\n      <QueryEditor\n        query={props.query}\n        datasource={props.datasource}\n        onChange={(query) =>\n          props.onChange(\n            {\n              ...query,\n              field: props.query.field,\n            },\n            definition\n          )\n        }\n        onRunQuery={() => {}}\n        queryTypes={[\n          QueryType.Repositories,\n          QueryType.Contributors,\n          QueryType.Tags,\n          QueryType.Releases,\n          QueryType.Labels,\n          QueryType.Milestones,\n          QueryType.Projects,\n        ]}\n      />\n      <QueryInlineField\n        width={10}\n        labelWidth={10}\n        label=\"Field Value\"\n        tooltip=\"This field determines the value used for the variable\"\n      >\n        <FieldSelect\n          onChange={(value) =>\n            props.onChange(\n              {\n                ...props.query,\n                key: value,\n              },\n              definition\n            )\n          }\n          options={choices || []}\n          width={64}\n          value={props.query.key}\n          loading={!choices}\n        />\n      </QueryInlineField>\n      <QueryInlineField\n        width={10}\n        labelWidth={10}\n        label=\"Field Display\"\n        tooltip=\"This field determines the text used for the variable\"\n      >\n        <FieldSelect\n          onChange={(value) =>\n            props.onChange(\n              {\n                ...props.query,\n                field: value,\n              },\n              definition\n            )\n          }\n          options={choices || []}\n          width={64}\n          value={props.query.field}\n          loading={!choices}\n        />\n      </QueryInlineField>\n    </>\n  );\n};\n\nexport default VariableQueryEditor;\n","import { DataSourcePlugin } from '@grafana/data';\nimport { GithubDataSource } from './DataSource';\nimport ConfigEditor from './views/ConfigEditor';\nimport QueryEditor from './views/QueryEditor';\nimport VariableQueryEditor from './views/VariableQueryEditor';\nimport { GitHubQuery, GithubDataSourceOptions, GithubSecureJsonData } from './types';\n\nexport const plugin = new DataSourcePlugin<\n  GithubDataSource,\n  GitHubQuery,\n  GithubDataSourceOptions,\n  GithubSecureJsonData\n>(GithubDataSource)\n  .setConfigEditor(ConfigEditor)\n  .setVariableQueryEditor(VariableQueryEditor)\n  .setQueryEditor(QueryEditor);\n"],"names":["module","exports","__WEBPACK_EXTERNAL_MODULE__644__","__WEBPACK_EXTERNAL_MODULE__305__","__WEBPACK_EXTERNAL_MODULE__545__","__WEBPACK_EXTERNAL_MODULE__388__","__WEBPACK_EXTERNAL_MODULE__980__","__WEBPACK_EXTERNAL_MODULE__650__","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","undefined","__webpack_modules__","n","getter","__esModule","d","a","definition","key","o","Object","defineProperty","enumerable","get","obj","prop","prototype","hasOwnProperty","call","r","Symbol","toStringTag","value","replaceVariable","t","scoped","format","replace","interpolateObject","input","newOptions","keys","forEach","option","Array","isArray","replaced","map","opt","QueryType","Commits","Issues","Contributors","Tags","Releases","Pull_Requests","Labels","Repositories","Organizations","GraphQL","Milestones","Packages","Vulnerabilities","Projects","ProjectItems","Stargazers","Workflows","Workflow_Usage","PackageType","NPM","RUBYGEMS","MAVEN","DOCKER","DEBIAN","NUGET","PYPI","PullRequestTimeField","ClosedAt","CreatedAt","MergedAt","None","IssueTimeField","WorkflowsTimeField","UpdatedAt","ProjectQueryType","ORG","USER","DefaultQueryType","isValid","query","queryType","isEmpty","options","organization","kind","user","defaultAnnotationEventFinder","userId","login","email","avatarUrl","time","timeEnd","title","text","tags","prepareAnnotation","json","isNewAnnotation","annotation","annotationRest","field","timeField","targetRest","target","mappings","source","AnnotationEventFieldSource","GithubDataSource","DataSourceWithBackend","request","app","CoreApp","targets","properties","packageType","reportInteraction","trackRequest","super","applyTemplateVariables","updatedQuery","replaceVariables","this","templateSrv","getLabels","repository","owner","getResource","annotationQuery","res","datasourceId","id","refId","name","range","interval","toPromise","data","length","frame","events","hasTime","hasText","byName","f","fields","toLowerCase","regex","finder","entries","lower","v","split","RegExp","push","find","type","FieldType","setter","i","anno","values","match","exec","getAnnotationsFromFrame","getChoices","to","from","err","Promise","reject","metricFindQuery","rangeRaw","DataFrameView","item","ex","constructor","instanceSettings","getTemplateSrv","filterQuery","hide","annotations","__defProp","__defProps","defineProperties","__getOwnPropDescs","getOwnPropertyDescriptors","__getOwnPropSymbols","getOwnPropertySymbols","__hasOwnProp","__propIsEnum","propertyIsEnumerable","__defNormalProp","configurable","writable","__spreadValues","b","DataSourceDescription","dataSourceName","docsLink","hasRequiredFields","className","theme","useTheme2","styles","container","css","p","margin","marginTop","spacing","typography","body","color","colors","secondary","link","textDecoration","cx","href","rel","GenericConfigSection","children","description","isCollapsible","isInitiallyOpen","isOpen","setIsOpen","useState","iconName","isSubSection","collapsibleButtonAriaLabel","header","display","justifyContent","alignItems","subtitle","fontWeight","fontWeightRegular","descriptionText","marginBottom","bodySmall","content","IconButton","onClick","size","ConfigSection","_a","_b","props","exclude","indexOf","__objRest","Components","ConfigEditor","AccessToken","QueryEditor","ariaLabel","Owner","Repository","Query","Ref","Number","AnnotationEditor","selectors","getStyles","externalLink","radioButton","QueryField","label","labelWidth","tooltip","InlineFormLabel","width","QueryRowTerminator","div","QueryInlineField","QueryEditorRow","setRepository","setOwner","useEffect","LeftColumnWidth","Input","aria-label","RightColumnWidth","onChange","el","currentTarget","onBlur","ref","setRef","gitRef","timeFieldOptions","filter","_","setQuery","Select","defaultTimeField","DefaultPackageType","packageTypeOptions","names","setNames","Filters","filters","setFilters","loading","setLoading","onValueChange","index","selected","changeFilters","onOpChange","op","onConjunctionChange","conjunction","remove","loadValues","opts","loadOptions","list","opList","wrapper","SegmentAsync","placeholder","allowCustomValue","update","Segment","ops","span","Icon","displayName","queryTypes","fetchFilters","num","includes","val","parseInt","isNaN","org","setOrg","setUser","number","setNumber","setKind","RadioButtonGroup","workflow","setWorkflow","queryEditors","component","QueryEditorLabels","QueryEditorContributors","QueryEditorTags","QueryEditorReleases","QueryEditorCommits","QueryEditorMilestones","QueryEditorIssues","QueryEditorPackages","QueryEditorPullRequests","QueryEditorVulnerabilities","QueryEditorProjects","QueryEditorWorkflows","QueryEditorWorkflowUsage","queryTypeOptions","nonRepoTypes","useCallback","onRunQuery","onKeyChange","queryEditor","menuShouldPortal","qt","QueryEditorRepository","repo","containerCss","spannerCss","disabled","Spinner","plugin","DataSourcePlugin","setConfigEditor","jsonData","secureJsonData","secureJsonFields","secureSettings","useStyles2","selectedLicense","setSelectedLicense","githubUrl","onSettingUpdate","set","event","onOptionsChange","Divider","Collapse","collapsible","onToggle","x","pre","Field","SecretInput","data-testid","accessToken","isConfigured","onReset","Label","onUpdateDatasourceJsonDataOption","setVariableQueryEditor","datasource","choices","setChoices","useMemo","FieldSelect","setQueryEditor"],"sourceRoot":""}